from functools import wraps
from urllib.parse import urlparse
from aiogram import types

from bot.bot import bot
from bot.utils.database import Database
from config import TIME_OUT, CHANNEL_ID, CHANNEL_LINK


db = Database()

allowed_domains = [
    'tiktok.com',
    'www.tiktok.com',
    'instagram.com',
    'www.instagram.com',
]

def allowed_links():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            try:
                parsed_url = urlparse(message.text)
                if not parsed_url.scheme or not parsed_url.netloc:
                    return await message.answer(
                        text=(
                            '‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n'
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL.\n\n'
                            '–ü—Ä–∏–º–µ—Ä:\n'
                            'https://www.instagram.com/reel/xxxxx/'
                        ),
                        parse_mode='HTML'
                    )
                domain = parsed_url.netloc.lower()
                if domain in allowed_domains:
                    return await func(message, *args, **kwargs)
                else:
                    await message.answer(
                        text=(
                            '‚ö†Ô∏è <b>–°–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n'
                            '‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n'
                            '‚Ä¢ Instagram üì∏\n'
                            '‚Ä¢ TikTok üéµ'
                        )
                    )
            except Exception:
                await message.answer(
                    text=(
                        '‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏!</b>\n'
                        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n'
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º.'
                    ),
                    parse_mode='HTML'
                )
        return wrapper
    return decorator

def check_db():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            telegram_id = message.chat.id
            if db.user_exists(telegram_id=telegram_id) == False:
                db.create_user(telegram_id=telegram_id)
                db.add_timeout(telegram_id=telegram_id, duration_seconds=0)
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator

def timeout():
    """–í–∞–¥–∞—á–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            telegram_id = message.chat.id
            if db.check_timeout(telegram_id=telegram_id):
                return await message.answer(
                    text=(
                        f'‚è≥ <b>–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Ç–∞–π–º-–∞—É—Ç {TIME_OUT} —Å–µ–∫—É–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>'
                    )
                )
            else:
                db.update_timeout(telegram_id=telegram_id, duration_seconds=TIME_OUT)
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator

def in_channel():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ—Ç"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.chat.id)
            if member.status != 'left':
                return await func(message, *args, **kwargs)
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                    url=CHANNEL_LINK
                ))
                await message.answer(
                    text=(
                        'üì¢ <b>–ü–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n'
                        '‚úÖ –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.'
                    ),
                    reply_markup=markup
                )
        return wrapper
    return decorator